using System;
using System.Collections.Generic;
using Logic.JudgementParts;
using Logic.NotionTypes.DefinitionParts;

namespace Logic
{
    class Definition
    {

        #region Properties
        #endregion
        #region Fields
        #endregion

        private Definiendum _subject;
        private Definies _predicates;

        /// <summary>
        /// Определение должно быть соразмерным, т. е; таким, 
        /// в котором объёмы определяемого и определяющего тождественны, 
        /// т. е. одинаково велики. Если правило это нарушено, то опреде¬ление неадекватно, 
        /// или несоразмерно. В таком случае оп¬ределение делается или слишком широким или 
        /// слишком узким, именно, если объём определяющего становится слишком широким или 
        /// слишком узким в срав¬нении с объёмом определяемого. Возьмём в пример определение лошади. 
        /// Если сказать, что «лошадь есть домашнее животное», то это определение будет слишком широким; 
        /// в нём объём определяющего будет более широким, чем объём определяемого понятия 
        /// (в объём домашнего животного, кроме лошади, входят ещё коровы, собаки и т. п.). 
        /// Относительно такого определения можно также сказать, что в него не входит ука¬зание 
        /// существенного признака данного понятия. Если в опре¬делении опущены существенные признаки понятия, 
        /// тогда оно окажется слишком широким, как в только что приведённом примере.
        /// </summary>
        public Boolean IsCommensurate 
        {
            get
            {
                return true;
            }
        }

        /// <summary>
        /// Определение не должно делать круга. 
        /// Это правило требует, чтобы определяемое понятие не определялось посредством понятия, 
        /// которое само делается понятным только посредством определяемого. Возьмём, например, 
        /// определение «вращение есть движение вокруг оси». Это определение понятия «вращение» 
        /// посредством понятия «ось» делает круг, ибо само понятие «ось» определяется только через понятие «вращение» 
        /// (как известно, ось — это пря¬мая, вокруг которой происходит вращение). Таким образом, ясно, что в 
        /// нашем определении получается круг: понятие «враще¬ние» определяется посредством понятия «ось», а 
        /// понятие «ось»— посредством понятия «вращение».
        /// </summary>
        public Boolean IsntLoopable
        {
            get { return true; }
        }

        /// <summary>
        /// Определение не должно быть отрицательным, оно дол¬жно указывать признаки, 
        /// присущие данному понятию, а не чуждые ему, ибо эти последние для нас неважны и, 
        /// кроме того, их можно указать очень много. Напри¬мер, возьмём определение 
        /// «театр есть здание, не служащее для жилья». Если А будет здание, служащее для жилья, то не-А, или зданий, 
        /// не служащих для жилья, будет бесчисленное мно¬жество. Таким образом, это определение делается для нас непригодным. 
        /// К числу определений, которые вследствие своего отрицательного характера непригодны, нужно отнести следую¬щие: 
        /// «жидкость есть то, что не твердо и не газообразно», «точка есть то, что не имеет частей и не имеет никакой величины». 
        /// От¬рицательные определения не раскрывают содержания понятия, они оставляют содержание понятия неопределённым. 
        /// По¬этому отрицательные определения не отвечают главной цели определения — раскрыть содержание определяемого понятия, 
        /// сделать содержание понятия определённым.. 
        /// Отрицательные определения могут быть употребляемы только тогда, когда определяемое понятие имеет 
        /// отрицательный характер. Например, «чужестранец»—это человек, не принадлежащий к данной стране, д
        /// </summary>
        public Boolean IsntNegative
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Определение должно быть ясным, т. е. в определении нельзя пользоваться 
        /// выражениями двусмысленными, метафорическими и вообще мало по-нятными. 
        /// Нарушение этого правила приводит к попытке сделать понятным неизвестное 
        /// через посредство ещё менее известного (ignotum per ignotius). Например, 
        /// выражения «архитектура есть застывшая музыка» и «нужда есть мать изобретения» — 
        /// это есть образные выражения, которые не объясняют значения термина. Если же сказать, 
        /// что «эксцентричность есть своеобразная идиосинкразия», то мы непонятное пытаемся объяснить посредством непонятного же.
        /// </summary>
        public Boolean IsClear 
        {
            get
            {
                return true;
            }
        }

        #region Constructors
        Definition()
        {

        }
        #endregion
    }
}
